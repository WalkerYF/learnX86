EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
noname.exe_ -- emu8086 assembler version: 4.08  
 
[ 2017/11/9 星期四  --  下午 8:06:18 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       assume ds:data, cs:code
[   2]        :                                       
[   3]        :                                       data segment
[   4]    0000: 77 65 6C 63 6F 6D 65 20 74 6F 20 6D   db 'welcome to masm!'
                61 73 6D 21                         
[   5]        :                                       data ends
[   6]        :                                       
[   7]        :                                       code segment
[   8]    0010:                                       start:
[   9]    0010: B8 00 00                              mov ax, data
[  10]    0013: 8E D8                                 mov ds, ax
[  11]    0015: B8 00 B8                              mov ax, 0B800H   ; 初始化 显存区域为段首地址
[  12]    0018: 8E C0                                 mov es, ax
[  13]        :                                       
[  14]    001A: BB 80 06                              mov bx, 1664
[  15]    001D: BE 00 00                              mov si, 0        ; 离显示区域首地址的偏移量
[  16]    0020: B9 10 00                              mov cx, 16
[  17]    0023:                                       char1:
[  18]    0023: 8A 04                                 mov al, [si]      ; 低8位为显示的数据
[  19]    0025: B4 82                                 mov ah, 10000010B ; 高八位为显示的格式
[  20]    0027: 26 88 47 01                           mov es:[bx+1], al
[  21]    002B: 26 88 27                              mov es:[bx], ah
[  22]        :                                       ;mov es:[bx], ax
[  23]    002E: 83 C3 02                              add bx, 2
[  24]    0031: 46                                    inc si
[  25]    0032: E2 EF                                 loop char1
[  26]        :                                       
[  27]    0034: BB 20 07                              mov bx, 1824
[  28]    0037: BE 00 00                              mov si, 0
[  29]    003A: B9 10 00                              mov cx, 16
[  30]    003D:                                       char2:
[  31]    003D: 8A 04                                 mov al, [si]
[  32]    003F: B4 A4                                 mov ah, 10100100B
[  33]    0041: 26 89 07                              mov es:[bx], ax
[  34]    0044: 83 C3 02                              add bx, 2
[  35]    0047: 46                                    inc si
[  36]    0048: E2 F3                                 loop char2
[  37]        :                                       
[  38]    004A: BB C0 07                              mov bx, 1984
[  39]    004D: BE 00 00                              mov si, 0
[  40]    0050: B9 10 00                              mov cx, 16
[  41]    0053:                                       char3:
[  42]    0053: 8A 04                                 mov al, [si]
[  43]    0055: B4 F1                                 mov ah, 11110001B
[  44]    0057: 26 89 07                              mov es:[bx], ax
[  45]    005A: 83 C3 02                              add bx, 2
[  46]    005D: 46                                    inc si
[  47]    005E: E2 F3                                 loop char3
[  48]        :                                       
[  49]    0060: B8 00 4C                              mov ax, 4C00H
[  50]    0063: CD 21                                 int 21H
[  51]        :                                       code ends
[  52]        :                                       end start
[  53]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 65      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: C2      -   check sum (l.byte)
0013: B9      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 01      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 01      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
