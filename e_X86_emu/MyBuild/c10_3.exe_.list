EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
c10_3.exe_ -- emu8086 assembler version: 4.08  
 
[ 2017/11/11 星期六  --  上午 11:36:50 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       assume cs:code
[   2]        :                                       ; 把所有字母变成大写
[   3]        :                                       data segment
[   4]    0000: 61 62 63 64 65 66 67 00               db 'abcdefg',0
[   5]    0008: 07 00                                 dw 7
[   6]        :                                       data ends
[   7]        :                                       
[   8]        :                                       code segment
[   9]        :                                       
[  10]    0010:                                       start:
[  11]    0010: B8 00 00                              mov ax,data
[  12]    0013: 8E D8                                 mov ds,ax
[  13]        :                                       
[  14]    0015: BE 00 00                              mov si,0   ; 传递参数，字母数组地址
[  15]    0018: B9 07 00                              mov cx,7   ; 传递参数 7个字母
[  16]        :                                       
[  17]    001B: E8 19 00                              call capital_i2
[  18]        :                                       
[  19]    001E: B8 00 4C                              mov ax,4c00h
[  20]    0021: CD 21                                 int 21h
[  21]        :                                       
[  22]        :                                       ; 字符串首地址：si
[  23]        :                                       ; 字符串长度：cx
[  24]    0023:                                       capital:
[  25]    0023: 80 24 DF                              and [si], 11011111b
[  26]    0026: 46                                    inc si
[  27]    0027: E2 FA                                 loop capital
[  28]    0029: C3                                    ret
[  29]        :                                       
[  30]        :                                       ; 改进版，将一个全是字母，以0为结尾的字符窜，转化为大写
[  31]        :                                       ; 字符串首地址：si
[  32]        :                                       ; cx：用于检测当前字节是否为零
[  33]    002A:                                       capital_i:
[  34]    002A: 8A 0C                                 mov cl, [si]
[  35]    002C: B5 00                                 mov ch, 0
[  36]    002E: E3 06                                 jcxz ok
[  37]    0030: 80 24 DF                              and [si], 11011111b
[  38]    0033: 46                                    inc si
[  39]    0034: EB F4                                 jmp short capital_i
[  40]    0036:                                       ok:
[  41]    0036: C3                                    ret
[  42]        :                                       
[  43]        :                                       
[  44]        :                                       ; 解决寄存器冲突
[  45]        :                                       ; 编写子程序的时候不必关心调用者使用了那些寄存器
[  46]        :                                       ; 编写调用子程序的程序不必关心子程序到底使用了哪些寄存器
[  47]        :                                       ; 将寄存器中的内容都保存起来，在返回前恢复
[  48]        :                                       ; 改进版2，将一个全是字母，以0为结尾的字符窜，转化为大写
[  49]        :                                       ; 字符串首地址：si
[  50]        :                                       ; cx：用于检测当前字节是否为零
[  51]    0037:                                       capital_i2:
[  52]    0037: 51                                    push cx
[  53]    0038: 56                                    push si
[  54]    0039:                                       change:
[  55]    0039: 8A 0C                                 mov cl, [si]
[  56]    003B: B5 00                                 mov ch, 0
[  57]    003D: E3 06                                 jcxz ok_i2
[  58]    003F: 80 24 DF                              and byte ptr [si], 11011111b
[  59]    0042: 46                                    inc si
[  60]    0043: EB F4                                 jmp short change
[  61]    0045:                                       ok_i2:
[  62]    0045: 5E                                    pop si
[  63]    0046: 59                                    pop cx
[  64]    0047: C3                                    ret
[  65]        :                                       
[  66]        :                                       
[  67]        :                                       code ends
[  68]        :                                       
[  69]        :                                       
[  70]        :                                       end start
[  71]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 48      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: 56      -   check sum (l.byte)
0013: 11      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 01      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 01      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
