Messages
=========================
SPIM Version 9.0.1 of January 2, 2011
Copyright 1990-2010, James R. Larus.
All Rights Reserved.
SPIM is distributed under a BSD license.
See the file README for a full copyright notice.
Loaded: F:\PCSPIm安装后软件\exceptions.s
Memory and registers cleared and the simulator reinitialized.

SPIM Version 9.0.1 of January 2, 2011
Copyright 1990-2010, James R. Larus.
All Rights Reserved.
SPIM is distributed under a BSD license.
See the file README for a full copyright notice.
Loaded: F:\PCSPIm安装后软件\exceptions.s
Memory and registers cleared and the simulator reinitialized.

SPIM Version 9.0.1 of January 2, 2011
Copyright 1990-2010, James R. Larus.
All Rights Reserved.
SPIM is distributed under a BSD license.
See the file README for a full copyright notice.
Loaded: E:\实验软件工具 admtools\PCSPIM软件\安装后软件\exceptions.s
Memory and registers cleared and the simulator reinitialized.

SPIM Version 9.0.1 of January 2, 2011
Copyright 1990-2010, James R. Larus.
All Rights Reserved.
SPIM is distributed under a BSD license.
See the file README for a full copyright notice.
Loaded: D:\MIPS汇编程序(伪指令)\show-hello.s
spim: (parser) Label is defined for the second time on line 16 of file n
Memory and registers cleared and the simulator reinitialized.

SPIM Version 9.0.1 of January 2, 2011
Copyright 1990-2010, James R. Larus.
All Rights Reserved.
SPIM is distributed under a BSD license.
See the file README for a full copyright notice.
Loaded: D:\MIPS汇编程序(伪指令)\show-hello.s
spim: (parser) Label is defined for the second time on line 16 of file t
Memory and registers cleared and the simulator reinitialized.

SPIM Version 9.0.1 of January 2, 2011
Copyright 1990-2010, James R. Larus.
All Rights Reserved.
SPIM is distributed under a BSD license.
See the file README for a full copyright notice.
Loaded: D:\MIPS汇编程序(伪指令)\show-hello.s
spim: (parser) Label is defined for the second time on line 16 of file z
Memory and registers cleared and the simulator reinitialized.

SPIM Version 9.0.1 of January 2, 2011
Copyright 1990-2010, James R. Larus.
All Rights Reserved.
SPIM is distributed under a BSD license.
See the file README for a full copyright notice.
Loaded: D:\MIPS汇编程序(伪指令)\show-hello.s
spim: (parser) Label is defined for the second time on line 16 of file z
Memory and registers cleared and the simulator reinitialized.

SPIM Version 9.0.1 of January 2, 2011
Copyright 1990-2010, James R. Larus.
All Rights Reserved.
SPIM is distributed under a BSD license.
See the file README for a full copyright notice.
Loaded: D:\MIPS汇编程序(伪指令)\show-hello.s
spim: (parser) Label is defined for the second time on line 16 of file z


Registers
=========================
 PC      = 00000000   EPC     = 00000000   Cause   = 00000000   BadVAddr= 00000000
 Status  = 3000ff10   HI      = 00000000   LO      = 00000000
                                 General Registers
R0  (r0) = 00000000  R8  (t0) = 00000000  R16 (s0) = 00000000  R24 (t8) = 00000000
R1  (at) = 00000000  R9  (t1) = 00000000  R17 (s1) = 00000000  R25 (t9) = 00000000
R2  (v0) = 00000000  R10 (t2) = 00000000  R18 (s2) = 00000000  R26 (k0) = 00000000
R3  (v1) = 00000000  R11 (t3) = 00000000  R19 (s3) = 00000000  R27 (k1) = 00000000
R4  (a0) = 00000000  R12 (t4) = 00000000  R20 (s4) = 00000000  R28 (gp) = 10008000
R5  (a1) = 00000000  R13 (t5) = 00000000  R21 (s5) = 00000000  R29 (sp) = 7fffeffc
R6  (a2) = 00000000  R14 (t6) = 00000000  R22 (s6) = 00000000  R30 (s8) = 00000000
R7  (a3) = 00000000  R15 (t7) = 00000000  R23 (s7) = 00000000  R31 (ra) = 00000000

 FIR    = 00009800    FCSR    = 00000000    FCCR   = 00000000   FEXR    = 00000000
 FENR   = 00000000
                              Double Floating Point Registers
FP0  = 0.000000      FP8  = 0.000000      FP16 = 0.000000      FP24 = 0.000000     
FP2  = 0.000000      FP10 = 0.000000      FP18 = 0.000000      FP26 = 0.000000     
FP4  = 0.000000      FP12 = 0.000000      FP20 = 0.000000      FP28 = 0.000000     
FP6  = 0.000000      FP14 = 0.000000      FP22 = 0.000000      FP30 = 0.000000     
                              Single Floating Point Registers
FP0  = 0.000000      FP8  = 0.000000      FP16 = 0.000000      FP24 = 0.000000     
FP1  = 0.000000      FP9  = 0.000000      FP17 = 0.000000      FP25 = 0.000000     
FP2  = 0.000000      FP10 = 0.000000      FP18 = 0.000000      FP26 = 0.000000     
FP3  = 0.000000      FP11 = 0.000000      FP19 = 0.000000      FP27 = 0.000000     
FP4  = 0.000000      FP12 = 0.000000      FP20 = 0.000000      FP28 = 0.000000     
FP5  = 0.000000      FP13 = 0.000000      FP21 = 0.000000      FP29 = 0.000000     
FP6  = 0.000000      FP14 = 0.000000      FP22 = 0.000000      FP30 = 0.000000     
FP7  = 0.000000      FP15 = 0.000000      FP23 = 0.000000      FP31 = 0.000000     


Console
=========================


Text Segment
=========================
[0x00400000]        0x34020004  ori $2, $0, 4                   ; 5: li $v0, 4                     # just the print syscall in SPIM
[0x00400004]        0x3c011001  lui $1, 4097 [str]              ; 6: la $a0, str
[0x00400008]        0x34240000  ori $4, $1, 0 [str]
[0x0040000c]        0x0000000c  syscall                         ; 7: syscall
[0x00400010]        0x3402000a  ori $2, $0, 10                  ; 9: li $v0, 10                     # exit
[0x00400014]        0x0000000c  syscall                         ; 10: syscall
[0x00400018]        0x3c011001  lui $1, 4097 [number]           ; 10: la   $t0,  number    #读取两个整数的首地址放入$t0
[0x0040001c]        0x3428000c  ori $8, $1, 12 [number]
[0x00400020]        0x8d090000  lw $9, 0($8)                    ; 11: lw   $t1,  0($t0)    #读0-3字节内容存入$t1
[0x00400024]        0x8d0a0004  lw $10, 4($8)                   ; 12: lw   $t2,  4($t0)    #读4-7字节内容存入$t2
[0x00400028]        0x34020004  ori $2, $0, 4                   ; 14: li   $v0,  4         #打印msg1
[0x0040002c]        0x3c011001  lui $1, 4097 [msg1]             ; 15: la   $a0,  msg1
[0x00400030]        0x34240014  ori $4, $1, 20 [msg1]
[0x00400034]        0x0000000c  syscall                         ; 16: syscall
[0x00400038]        0x34020001  ori $2, $0, 1                   ; 18: li   $v0,  1         #打印转换前$t1中的值 integer
[0x0040003c]        0x00092021  addu $4, $0, $9                 ; 19: move $a0,  $t1
[0x00400040]        0x0000000c  syscall                         ; 20: syscall
[0x00400044]        0x34020004  ori $2, $0, 4                   ; 22: li   $v0,  4         #打印msg2
[0x00400048]        0x3c011001  lui $1, 4097 [msg2]             ; 23: la   $a0,  msg2
[0x0040004c]        0x34240029  ori $4, $1, 41 [msg2]
[0x00400050]        0x0000000c  syscall                         ; 24: syscall
[0x00400054]        0x34020001  ori $2, $0, 1                   ; 26: li   $v0,  1         #打印转换前$t2中的值
[0x00400058]        0x000a2021  addu $4, $0, $10                ; 27: move $a0,  $t2
[0x0040005c]        0x0000000c  syscall                         ; 28: syscall
[0x00400060]        0x00095821  addu $11, $0, $9                ; 30: move $t3,  $t1       #关键部分，在寄存器间move数据
[0x00400064]        0x000a4821  addu $9, $0, $10                ; 31: move $t1,  $t2
[0x00400068]        0x000b5021  addu $10, $0, $11               ; 32: move $t2,  $t3
[0x0040006c]        0x34020004  ori $2, $0, 4                   ; 34: li   $v0,  4         #打印msg3
[0x00400070]        0x3c011001  lui $1, 4097 [msg3]             ; 35: la   $a0,  msg3
[0x00400074]        0x34240040  ori $4, $1, 64 [msg3]
[0x00400078]        0x0000000c  syscall                         ; 36: syscall
[0x0040007c]        0x34020001  ori $2, $0, 1                   ; 38: li   $v0,  1         #打印转换后$t1中的值  
[0x00400080]        0x00092021  addu $4, $0, $9                 ; 39: move $a0,  $t1
[0x00400084]        0x0000000c  syscall                         ; 40: syscall
[0x00400088]        0x34020004  ori $2, $0, 4                   ; 42: li   $v0,  4         #打印换行符  \n
[0x0040008c]        0x3c011001  lui $1, 4097 [msg4]             ; 43: la   $a0,  msg4
[0x00400090]        0x3424005b  ori $4, $1, 91 [msg4]
[0x00400094]        0x0000000c  syscall                         ; 44: syscall
[0x00400098]        0x34020001  ori $2, $0, 1                   ; 46: li   $v0,  1         #打印转换后$t2中的值
[0x0040009c]        0x000a2021  addu $4, $0, $10                ; 47: move $a0,  $t2
[0x004000a0]        0x0000000c  syscall                         ; 48: syscall
[0x004000a4]        0x3402000a  ori $2, $0, 10                  ; 50: li $v0, 10                  # 退出
[0x004000a8]        0x0000000c  syscall                         ; 51: syscall

        KERNEL


Data Segment
=========================
        DATA
[0x10000000]...[0x10010000]        0x00000000
[0x10010000]                        0x6c6c6568  0x6f77206f  0x00646c72  0x0000000c
[0x10010010]                        0x00000022  0x20656874  0x73726966  0x756e2074
[0x10010020]                        0x7265626d  0x3a736920  0x68740a00  0x65732065
[0x10010030]                        0x646e6f63  0x6d756e20  0x20726562  0x003a7369
[0x10010040]                        0x776f6e0a  0x65687420  0x72612079  0x77732065
[0x10010050]                        0x65707061  0x73612064  0x0a000a3a  0x00000000
[0x10010060]...[0x10040000]        0x00000000

        STACK
[0x7fffeffc]                        0x00000000
[0x7ffff000]...[0x80000000]        0x00000000

        KERNEL DATA
[0x90000000]...[0x90010000]        0x00000000


