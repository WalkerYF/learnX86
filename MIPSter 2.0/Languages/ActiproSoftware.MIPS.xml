<SyntaxLanguage Key="MIPS" LanguageDefinitionVersion="2.0" Secure="True" xmlns="http://ActiproSoftware/SyntaxEditor/2.0/LanguageDefinition">

	<!-- String Properties -->
	<Properties>
		<Property Key="Creator" Value="Downcast Systems" />
		<Property Key="Copyright" Value="Copyright (c) 2004 Downcast Systems.  All rights reserved." />
	</Properties>

	<!-- Triggers -->
	<Triggers>
		<KeyPressTrigger Key="MemberListTrigger" Character=".">
			<KeyPressTriggerValidStates>
				<KeyPressTriggerValidState State="DefaultState" />
			</KeyPressTriggerValidStates>
		</KeyPressTrigger>
		
		<!-- <KeyPressTrigger Key="RegisterListTrigger" Character="$">
			<KeyPressTriggerValidStates>
				<KeyPressTriggerValidState State="DefaultState" />
			</KeyPressTriggerValidStates>
		</KeyPressTrigger> -->
	</Triggers>

	<!-- Highlighting Styles -->	
	<Styles>
		<Style Key="ReservedWordStyle" ForeColor="Blue" BackColor="Default" Bold="True" Italic="False" Underline="False" />
		<Style Key="LabelStyle" ForeColor="Red" BackColor="Default" Bold="True" Italic="False" Underline="False" />
		<Style Key="NativeTypeStyle" ForeColor="#cc00cc" BackColor="Default" Bold="True" Italic="False" Underline="False" />
		<Style Key="OperatorStyle" ForeColor="#cc00cc" BackColor="Default" Bold="True" Italic="False" Underline="False" />
		<Style Key="ReservedWordOperatorStyle" ForeColor="Maroon" BackColor="Default" Bold="False" Italic="False" Underline="False" />
		<Style Key="NumberStyle" ForeColor="Black" BackColor="Default" Bold="False" Italic="False" Underline="False" />
		<Style Key="StringDelimiterStyle" ForeColor="DarkBlue" BackColor="Default" Bold="False" Italic="False" Underline="False" />
		<Style Key="StringDefaultStyle" ForeColor="DarkBlue" BackColor="Default" Bold="False" Italic="False" Underline="False" />
		<Style Key="CommentDelimiterStyle" ForeColor="Green" BackColor="Default" Bold="False" Italic="False" Underline="False" />
		<Style Key="CommentDefaultStyle" ForeColor="Green" BackColor="Default" Bold="False" Italic="False" Underline="False" />
	</Styles>
	
	<!-- States -->
	<States>
		<!-- Code -->
		<State Key="DefaultState">
			<!-- Patterns Groups -->
			<PatternGroups>
				<!-- Whitespace -->
				<RegexPatternGroup Token="WhitespaceToken" PatternValue="{WhitespaceMacro}+" IsWhitespace="True" />
				<!-- Line Terminators -->
				<RegexPatternGroup Token="LineTerminatorToken" PatternValue="{LineTerminatorMacro}" IsWhitespace="True" />
				<!-- Brackets -->
				<ExplicitPatternGroup Key="OpenParenthesisPatternGroup" Token="OpenParenthesisToken" PatternValue="(" EndBracket="CloseParenthesisPatternGroup" />
				<ExplicitPatternGroup Key="CloseParenthesisPatternGroup" Token="CloseParenthesisToken" PatternValue=")" StartBracket="OpenParenthesisPatternGroup" />
				<!-- Content Divider Reserved Words -->
				<ExplicitPatternGroup Token="EndSubReservedWordToken" Style="ReservedWordStyle" LookAhead="{NonWordMacro}" CaseSensitivity="AutoCorrect" IsContentDivider="True">
					<ExplicitPattern Value="End Sub" />
				</ExplicitPatternGroup>
				<ExplicitPatternGroup Token="EndFunctionReservedWordToken" Style="ReservedWordStyle" LookAhead="{NonWordMacro}" CaseSensitivity="AutoCorrect" IsContentDivider="True">
					<ExplicitPattern Value="End Function" />
				</ExplicitPatternGroup>
				<ExplicitPatternGroup Token="EndPropertyReservedWordToken" Style="ReservedWordStyle" LookAhead="{NonWordMacro}" CaseSensitivity="AutoCorrect" IsContentDivider="True">
					<ExplicitPattern Value="End Property" />
				</ExplicitPatternGroup>
				<!-- Punctuation -->
				<ExplicitPatternGroup Token="PunctuationToken">
					<ExplicitPatterns>
						,
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				<!-- Native Types -->
				<ExplicitPatternGroup Token="NativeTypeToken" Style="NativeTypeStyle" LookAhead="{NonWordMacro}" StartsWith="[A-Za-z]" CaseSensitivity="AutoCorrect">
					<ExplicitPatterns>
						align ascii asciiz byte data double extern float globl half kdata ktext set space text word
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				<!-- Booleans -->
				<ExplicitPatternGroup Token="BooleanToken" Style="ReservedWordStyle" LookAhead="{NonWordMacro}" CaseSensitivity="AutoCorrect">
					<ExplicitPatterns>
						False True
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				<!-- Reserved Word Operators -->
				<ExplicitPatternGroup Token="ReservedWordOperatorToken" Style="ReservedWordOperatorStyle" CaseSensitivity="AutoCorrect">
					<ExplicitPatterns>
						$zero $at $v0 $v1 $a0 $a1 $a2 $a3 $t0 $t1 $t2 $t3 $t4 $t5 $t6 $t7 $t8 $t9 $s0 $s1 $s2 $s3 $s4 $s5 $s6 $s7 $k0 $k1 $gp $sp $fp $ra $lo $hi
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				<!-- Reserved Words -->
				<ExplicitPatternGroup Token="ReservedWordToken" Style="ReservedWordStyle" LookAhead="{NonWordMacro}" StartsWith="[A-Fa-f]" CaseSensitivity="AutoCorrect">
					<ExplicitPatterns>
						abs.d abs.s add.d add.s bc1f bc1t c.eq.d c.eq.s c.le.d c.le.s c.lt.d c.lt.s cvt.d.s cvt.d.w cvt.s.d cvt.s.w cvt.w.d cvt.w.s div.d div.s 
						abs add addi addu addiu and andi div divu 
						b bczt bczf beq beqz bge bgeu bgez bgezal bgt bgtu bgtz ble bleu blez bltzal blt bltu bltz bne bnez
						break exit
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				<ExplicitPatternGroup Token="ReservedWordToken" Style="ReservedWordStyle" LookAhead="{NonWordMacro}" StartsWith="[G-Og-o]" CaseSensitivity="AutoCorrect">
					<ExplicitPatterns>
						l.d l.s mov.d mov.s mfc1.d mul.d mul.s neg.d neg.s
						mul mulo mulou mult multu neg negu nor not or ori
						j jal jalr jr
						li lui la lb lbu ld lh lhu lw lwcz lwl lwr move mfhi mflo mthi mtlo mfcz mtcz
						nop
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				<ExplicitPatternGroup Token="ReservedWordToken" Style="ReservedWordStyle" LookAhead="{NonWordMacro}" StartsWith="[P-Zp-z]" CaseSensitivity="AutoCorrect">
					<ExplicitPatterns>
						s.d s.s sub.d sub.s
						rem remu rol ror sll sllv sra srav srl srlv sub subu xor xori 
						seq sge sgeu sgt sgtu sle sleu slt slti sltu sltiu sne
						sb sd sh sw swcz swl swr ush usw ulh ulhu ulw
						rfe	syscall print_int print_float print_double print_string read_int read_float read_double read_string sbrk
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				<!-- Labels -->
				<RegexPatternGroup Token="LabelToken" Style="LabelStyle" PatternValue="(_ | {AlphaMacro})({WordMacro})* :" />
				<!-- Identifier -->
				<RegexPatternGroup Token="IdentifierToken" PatternValue="(_ | {AlphaMacro})({WordMacro})*" />
				<!-- Operators -->
				<ExplicitPatternGroup Token="OperatorToken" Style="OperatorStyle">
					<ExplicitPatterns>
						. 
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				<!-- Numbers -->
				<RegexPatternGroup Token="RealNumberToken" Style="NumberStyle" LookAhead="{NonWordMacro}">
					<RegexPattern Value="{DigitMacro}* \. {DigitMacro}+ ([Ee] [\+\-]? {DigitMacro}+)?" />
					<RegexPattern Value="{DigitMacro}+ [Ee] [\+\-]? {DigitMacro}+" />
				</RegexPatternGroup>
				<RegexPatternGroup Token="IntegerNumberToken" Style="NumberStyle" PatternValue="{DigitMacro}+" LookAhead="{NonWordMacro}" />
				<RegexPatternGroup Token="HexIntegerNumberToken" Style="NumberStyle" PatternValue="&amp; [hH] {HexDigitMacro}+" LookAhead="{NonWordMacro}" />
			</PatternGroups>
			<!-- Child States -->
			<ChildStates>
				<ChildState Key="DefaultState" />
				<ChildState Key="StringState" />
				<ChildState Key="CommentState" />
			</ChildStates>
		</State>
		
		<!-- Strings -->
		<State Key="StringState" Token="StringDefaultToken" Style="StringDefaultStyle">
			<!-- Scopes -->
			<Scopes>
				<Scope>
					<ExplicitPatternGroup Type="StartScope" Token="StringStartToken" Style="StringDelimiterStyle" PatternValue="&quot;" />
					<RegexPatternGroup Type="EndScope" Token="StringEndToken" Style="StringDelimiterStyle" PatternValue="[\&quot;\n]" LookAhead="[^\&quot;\n]" />	
				</Scope>
			</Scopes>
			<!-- Patterns Groups -->
			<PatternGroups>
				<ExplicitPatternGroup Token="StringEscapedCharacterToken" PatternValue="&quot;&quot;" />
				<RegexPatternGroup Token="StringDefaultToken2" PatternValue="[^\&quot;\n]+" />
			</PatternGroups>
		</State>
		
		<!-- Comments -->
		<State Key="CommentState" Token="CommentDefaultToken" Style="CommentDefaultStyle">
			<!-- Scopes -->
			<Scopes>
				<Scope>
					<ExplicitPatternGroup Type="StartScope" Token="CommentStartToken" Style="CommentDelimiterStyle" PatternValue="#" />
					<RegexPatternGroup Type="EndScope" Token="CommentEndToken" Style="CommentDelimiterStyle" PatternValue="{LineTerminatorMacro}" />
				</Scope>
			</Scopes>
			<!-- Patterns Groups -->
			<PatternGroups>
				<RegexPatternGroup Token="CommentDefaultToken" PatternValue="{NonLineTerminatorMacro}+" />
			</PatternGroups>
		</State>
	</States>

	<!-- Example Text -->
	<ExampleText>
		<![CDATA[
# UNTITLED PROGRAM

	.data	# Data declaration section

	.text

main:		# Start of code section
	

# END OF PROGRAM
		]]>
	</ExampleText>
		
</SyntaxLanguage>
