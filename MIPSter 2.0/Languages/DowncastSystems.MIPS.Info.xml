<?xml version="1.0" encoding="UTF-8"?>
<MIPSInfo>
	<MIPSCategories>
		<Category ID="0" Name="Arithmetic" />
		<Category ID="1" Name="Branch/Jump" />
		<Category ID="2" Name="Compare" />
		<Category ID="3" Name="Load/Store/Move" />
		<Category ID="4" Name="Instructions/Calls" />
		<Category ID="5" Name="CPU Registers" />
		<Category ID="6" Name="Directives" />
		<Category ID="7" Name="Floating Point" />
	</MIPSCategories>
	
	<MIPSKeyword Category="0" Keyword="abs" InfoTip="&lt;b&gt;abs Rdest, Rsrc&lt;/b&gt;&lt;br/&gt;Put the absolute value of the integer from register Rsrc in register Rdest." />
	<MIPSKeyword Category="0" Keyword="add" InfoTip="&lt;b&gt;add Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;(with overflow) Put the sum of the integers from register Rsrc1 and Src2 into register Rdest." />
	<MIPSKeyword Category="0" Keyword="addi" InfoTip="&lt;b&gt;addi Rdest, Rsrc1, Imm&lt;/b&gt;&lt;br/&gt;(with overflow) Put the sum of the integers from register Rsrc1 and Immediate into register Rdest." />
	<MIPSKeyword Category="0" Keyword="addu" InfoTip="&lt;b&gt;addu Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;(without overflow) Put the sum of the integers from register Rsrc1 and Src2 into register Rdest." />
	<MIPSKeyword Category="0" Keyword="addiu" InfoTip="&lt;b&gt;addiu Rdest, Rsrc1, Imm &lt;/b&gt;&lt;br/&gt;(without overflow) Put the sum of the integers from register Rsrc1 and Immediate into register Rdest." />
	<MIPSKeyword Category="0" Keyword="and" InfoTip="&lt;b&gt;and Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;Put the logical AND of the integers from register Rsrc1 and Src2 into register Rdest." />
	<MIPSKeyword Category="0" Keyword="andi" InfoTip="&lt;b&gt;andi Rdest, Rsrc1, Imm&lt;/b&gt;&lt;br/&gt;Put the logical AND of the integers from register Rsrc1 and Immediate into register Rdest." />
	
	<MIPSKeyword Category="0" Keyword="div" SpecialID="0" InfoTip="&lt;b&gt;div Rsrc1, Rsrc2&lt;/b&gt;&lt;br/&gt;(signed) Divide the contents of the two registers. Leave the quotient in register lo and the remainder in register hi. If an operand is negative, the remainder is unspecified by the MIPS architecture; depends on machine." />
	<MIPSKeyword Category="0" Keyword="div" SpecialID="1" InfoTip="&lt;b&gt;div Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;(signed, with overflow) Put the quotient of the integers from register Rsrc1 and Src2 into register Rdest." />
	
	<MIPSKeyword Category="0" Keyword="divu" SpecialID="1" InfoTip="&lt;b&gt;divu Rsrc1, Rsrc2&lt;/b&gt;&lt;br/&gt;(unsigned) Divide the contents of the two registers. Leave the quotient in register lo and the remainder in register hi. If an operand is negative, the remainder is unspecified by the MIPS architecture; depends on machine." />
	<MIPSKeyword Category="0" Keyword="divu" SpecialID="0" InfoTip="&lt;b&gt;divu Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;(unsigned, without overflow) Put the quotient of the integers from register Rsrc1 and Src2 into register Rdest. divu treats is operands as unsigned values." />
	
	<MIPSKeyword Category="0" Keyword="mul" InfoTip="&lt;b&gt;mul Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;(without overflow) Put the product of the integers from register Rsrc1 and Src2 into register Rdest." />
	<MIPSKeyword Category="0" Keyword="mulo" InfoTip="&lt;b&gt;mulo Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;(with overflow) Put the product of the integers from register Rsrc1 and Src2 into register Rdest." />
	<MIPSKeyword Category="0" Keyword="mulou" InfoTip="&lt;b&gt;mulou Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;(with overflow) Put the product of the integers from register Rsrc1 and Src2 into register Rdest." />
	<MIPSKeyword Category="0" Keyword="mult" InfoTip="&lt;b&gt;mult Rsrc1, Rsrc2&lt;/b&gt;&lt;br/&gt;Multiply the contents of the two registers. Leave the low-order word of the product in register lo and the high-word in register hi." />
	<MIPSKeyword Category="0" Keyword="multu" InfoTip="&lt;b&gt;multu Rsrc1, Rsrc2&lt;/b&gt;&lt;br/&gt;Multiply the contents of the two registers. Leave the low-order word of the product in register lo and the high-word in register hi." />
	<MIPSKeyword Category="0" Keyword="neg" InfoTip="&lt;b&gt;neg Rdest, RsrcValue&lt;/b&gt;&lt;br/&gt;(with overflow) Put the negative of the integer from register Rsrc into register Rdest." />
	<MIPSKeyword Category="0" Keyword="negu" InfoTip="&lt;b&gt;negu Rdest, RsrcValue&lt;/b&gt;&lt;br/&gt;(without overflow) Put the negative of the integer from register Rsrc into register Rdest." />
	<MIPSKeyword Category="0" Keyword="nor" InfoTip="&lt;b&gt;nor Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;Put the logical NOR of the integers from register Rsrc1 and Src2 into register Rdest." />
	<MIPSKeyword Category="0" Keyword="not" InfoTip="&lt;b&gt;not Rdest, Rsrc&lt;/b&gt;&lt;br/&gt;Put the bitwise logical negation of the integer from register Rsrc into register Rdest." />
	<MIPSKeyword Category="0" Keyword="or" InfoTip="&lt;b&gt;or Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;Put the logical OR of the integers from register Rsrc1 and Src2 into register Rdest." />
	<MIPSKeyword Category="0" Keyword="ori" InfoTip="&lt;b&gt;ori Rdest, Rsrc1, Imm&lt;/b&gt;&lt;br/&gt;Put the logical OR of the integers from register Rsrc1 and Immediate into register Rdest." />
	<MIPSKeyword Category="0" Keyword="rem" InfoTip="&lt;b&gt;rem Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;Put the remainder from dividing the integer in register Rsrc1 by the integer in Src2 into register Rdest. If an operand is negative, the remainder is unspecified by the MIPS architecture; depends on machine." />
	<MIPSKeyword Category="0" Keyword="remu" InfoTip="&lt;b&gt;remu Rdest, Rsrc1, Src2  &lt;/b&gt;&lt;br/&gt;Put the remainder from dividing the integer in register Rsrc1 by the integer in Src2 into register Rdest. If an operand is negative, the remainder is unspecified by the MIPS architecture; depends on machine." />
	<MIPSKeyword Category="0" Keyword="rol" InfoTip="&lt;b&gt;rol Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;Rotate the contents of register Rsrc1 left by the distance indicated by Src2 and put the result in register Rdest." />
	<MIPSKeyword Category="0" Keyword="ror" InfoTip="&lt;b&gt;ror Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;Rotate the contents of register Rsrc1 right by the distance indicated by Src2 and put the result in register Rdest." />
	<MIPSKeyword Category="0" Keyword="sll" InfoTip="&lt;b&gt;sll Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;(Left Logical) Shift the contents of register Rsrc1 left by the distance indicated by Src2 and put the result in register Rdest." />
	<MIPSKeyword Category="0" Keyword="sllv" InfoTip="&lt;b&gt;sllv Rdest, Rsrc1, Rsrc2&lt;/b&gt;&lt;br/&gt;(Left Logical Variable) Shift the contents of register Rsrc1 left by the distance indicated by Rsrc2 and put the result in register Rdest." />
	<MIPSKeyword Category="0" Keyword="sra" InfoTip="&lt;b&gt;sra Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;(Right Arithmetic) Shift the contents of register Rsrc1 right by the distance indicated by Src2 and put the result in register Rdest." />
	<MIPSKeyword Category="0" Keyword="srav" InfoTip="&lt;b&gt;srav Rdest, Rsrc1, Rsrc2&lt;/b&gt;&lt;br/&gt;(Right Arithmetic Variable) Shift the contents of register Rsrc1 right by the distance indicated by RSrc2 and put the result in register Rdest." />
	<MIPSKeyword Category="0" Keyword="srl" InfoTip="&lt;b&gt;srl Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;(Right Logical) Shift the contents of register Rsrc1 right by the distance indicated by Src2 and put the result in register Rdest." />
	<MIPSKeyword Category="0" Keyword="srlv" InfoTip="&lt;b&gt;srlv Rdest, Rsrc1, Rsrc2&lt;/b&gt;&lt;br/&gt;(Right Logical Variable) Shift the contents of register Rsrc1 right by the distance indicated by RSrc2 and put the result in register Rdest." />
	<MIPSKeyword Category="0" Keyword="sub" InfoTip="&lt;b&gt;sub Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;(with overflow) Put the difference of the integers from register Rsrc1 and Src2 into register Rdest." />
	<MIPSKeyword Category="0" Keyword="subu" InfoTip="&lt;b&gt;subu Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;(without overflow) Put the difference of the integers from register Rsrc1 and Src2 into register Rdest." />
	<MIPSKeyword Category="0" Keyword="xor" InfoTip="&lt;b&gt;xor Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;Put the logical XOR of the integers from register Rsrc1 and Src2 into register Rdest." />
	<MIPSKeyword Category="0" Keyword="xori" InfoTip="&lt;b&gt;xori Rdest, Rsrc1, Imm&lt;/b&gt;&lt;br/&gt;Put the logical XOR of the integers from register Rsrc1 and Immediate into register Rdest." />
	
	<MIPSKeyword Category="1" Keyword="b" InfoTip="&lt;b&gt;b label&lt;/b&gt;&lt;br/&gt;Unconditionally branch to the instruction at the label." />
	<MIPSKeyword Category="1" Keyword="bczt" InfoTip="&lt;b&gt;bczt labelcoprocessor z&lt;/b&gt;&lt;br/&gt;(labelCoprocessor z True) Conditionally branch to the instruction at the label if coprocessor z's condition flag is true. " />
	<MIPSKeyword Category="1" Keyword="bczf" InfoTip="&lt;b&gt;bczf labelcoprocessor z&lt;/b&gt;&lt;br/&gt;(labelCoprocessor z False) Conditionally branch to the instruction at the label if coprocessor z's condition flag is false." />
	<MIPSKeyword Category="1" Keyword="beq" InfoTip="&lt;b&gt;beq Rsrc1, Src2, label&lt;/b&gt;&lt;br/&gt;(on Equal) Conditionally branch to the instruction at the label if the contents of register Rsrc1 equals Src2." />
	<MIPSKeyword Category="1" Keyword="beqz" InfoTip="&lt;b&gt;beqz Rsrc, label&lt;/b&gt;&lt;br/&gt;(on Equal Zero) Conditionally branch to the instruction at the label if the contents of Rsrc equals 0." />
	<MIPSKeyword Category="1" Keyword="bge" InfoTip="&lt;b&gt;bge Rsrc1, Src2, label&lt;/b&gt;&lt;br/&gt;(on Greater Than Equal) Conditionally branch to the instruction at the label if the contents of register Rsrc1 are greater than or equal to Src2." />
	<MIPSKeyword Category="1" Keyword="bgeu" InfoTip="&lt;b&gt;bgeu Rsrc1, Src2, label&lt;/b&gt;&lt;br/&gt;(on Greater Than Equal Unsigned) Conditionally branch to the instruction at the label if the contents of register Rsrc1 are greater than or equal to Src2." />
	<MIPSKeyword Category="1" Keyword="bgez" InfoTip="&lt;b&gt;bgez Rsrc, label&lt;/b&gt;&lt;br/&gt;(on Greater Than Equal Zero) Conditionally branch to the instruction at the label if the contents of Rsrc are greater than or equal to 0." />
	<MIPSKeyword Category="1" Keyword="bgezal" InfoTip="&lt;b&gt;bgezal Rsrc, label&lt;/b&gt;&lt;br/&gt;(on Greater Than Equal Zero And Link) Conditionally branch to the instruction at the label if the contents of Rsrc are greater than or equal to 0. Save the address of the next instruction in register 31." />
	<MIPSKeyword Category="1" Keyword="bgt" InfoTip="&lt;b&gt;bgt Rsrc1, Src2, label&lt;/b&gt;&lt;br/&gt;(on Greater Than) Conditionally branch to the instruction at the label if the contents of register Rsrc1 are greater than Src2." />
	<MIPSKeyword Category="1" Keyword="bgtu" InfoTip="&lt;b&gt;bgtu Rsrc1, Src2, label&lt;/b&gt;&lt;br/&gt;(on Greater Than Unsigned) Conditionally branch to the instruction at the label if the contents of register Rsrc1 are greater than Src2." />
	<MIPSKeyword Category="1" Keyword="bgtz" InfoTip="&lt;b&gt;bgtz Rsrc, label&lt;/b&gt;&lt;br/&gt;(on Greater Than Zero) Conditionally branch to the instruction at the label if the contents of Rsrc are greater than 0." />
	<MIPSKeyword Category="1" Keyword="ble" InfoTip="&lt;b&gt;ble Rsrc1, Src2, label&lt;/b&gt;&lt;br/&gt;(on Less Than Equal) Conditionally branch to the instruction at the label if the contents of register Rsrc1 are less than or equal to Src2." />
	<MIPSKeyword Category="1" Keyword="bleu" InfoTip="&lt;b&gt;bleu Rsrc1, Src2, label &lt;/b&gt;&lt;br/&gt;(on Less Than Equal Unsigned) Conditionally branch to the instruction at the label if the contents of register Rsrc1 are less than or equal to Src2." />
	<MIPSKeyword Category="1" Keyword="blez" InfoTip="&lt;b&gt;blez Rsrc, label&lt;/b&gt;&lt;br/&gt;(on Less Than Equal Zero) Conditionally branch to the instruction at the label if the contents of Rsrc are less than or equal to 0." />
	<MIPSKeyword Category="1" Keyword="bltzal" InfoTip="&lt;b&gt;bltzal Rsrc, label&lt;/b&gt;&lt;br/&gt;(on Less Than And Link) Conditionally branch to the instruction at the label if the contents of Rsrc are less than 0. Save the address of the next instruction in register 31." />
	<MIPSKeyword Category="1" Keyword="blt" InfoTip="&lt;b&gt;blt Rsrc1, Src2, label&lt;/b&gt;&lt;br/&gt;(on Less Than) Conditionally branch to the instruction at the label if the contents of register Rsrc1 are less than Src2." />
	<MIPSKeyword Category="1" Keyword="bltu" InfoTip="&lt;b&gt;bltu Rsrc1, Src2, label&lt;/b&gt;&lt;br/&gt;(on Less Than Unsigned) Conditionally branch to the instruction at the label if the contents of register Rsrc1 are less than Src2." />
	<MIPSKeyword Category="1" Keyword="bltz" InfoTip="&lt;b&gt;bltz Rsrc, label&lt;/b&gt;&lt;br/&gt;(on Less Than Zero) Conditionally branch to the instruction at the label if the contents of Rsrc are less than 0." />
	<MIPSKeyword Category="1" Keyword="bne" InfoTip="&lt;b&gt;bne Rsrc1, Src2, label&lt;/b&gt;&lt;br/&gt;(on Not Equal) Conditionally branch to the instruction at the label if the contents of register Rsrc1 are not equal to Src2." />
	<MIPSKeyword Category="1" Keyword="bnez" InfoTip="&lt;b&gt;bnez Rsrc, label&lt;/b&gt;&lt;br/&gt;(on Not Equal Zero) Conditionally branch to the instruction at the label if the contents of Rsrc are not equal to 0." />
	<MIPSKeyword Category="1" Keyword="j" InfoTip="&lt;b&gt;j label&lt;/b&gt;&lt;br/&gt;Unconditionally jump to the instruction at the label." />
	<MIPSKeyword Category="1" Keyword="jal" InfoTip="&lt;b&gt;jal label&lt;/b&gt;&lt;br/&gt;(and Link) Unconditionally jump to the instruction at the label or whose address is in register Rsrc. Save the address of the next instruction in register 31." />
	<MIPSKeyword Category="1" Keyword="jalr" InfoTip="&lt;b&gt;jalr Rsrc&lt;/b&gt;&lt;br/&gt;(and Link Register) Unconditionally jump to the instruction at the label or whose address is in register Rsrc. Save the address of the next instruction in register 31." />
	<MIPSKeyword Category="1" Keyword="jr" InfoTip="&lt;b&gt;jr RsrcRegister&lt;/b&gt;&lt;br/&gt;Unconditionally jump to the instruction whose address is in register Rsrc." />

	<MIPSKeyword Category="2" Keyword="seq" InfoTip="&lt;b&gt;seq Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;Set register Rdest to 1 if register Rsrc1 equals Src2 and to be 0 otherwise." />
	<MIPSKeyword Category="2" Keyword="sge" InfoTip="&lt;b&gt;sge Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;(Greater Than Equal) Set register Rdest to 1 if register Rsrc1 is greater than or equal to Src2 and to 0 otherwise." />
	<MIPSKeyword Category="2" Keyword="sgeu" InfoTip="&lt;b&gt;sgeu Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;(Greater Than Equal Unsigned) Set register Rdest to 1 if register Rsrc1 is greater than or equal to Src2 and to 0 otherwise." />
	<MIPSKeyword Category="2" Keyword="sgt" InfoTip="&lt;b&gt;sgt Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;(Greater Than) Set register Rdest to 1 if register Rsrc1 is greater than Src2 and to 0 otherwise." />
	<MIPSKeyword Category="2" Keyword="sgtu" InfoTip="&lt;b&gt;sgtu Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;(Greater Than Unsigned) Set register Rdest to 1 if register Rsrc1 is greater than Src2 and to 0 otherwise." />
	<MIPSKeyword Category="2" Keyword="sle" InfoTip="&lt;b&gt;sle Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;(Less Than Equal) Set register Rdest to 1 if register Rsrc1 is less than or equal to Src2 and to 0 otherwise." />
	<MIPSKeyword Category="2" Keyword="sleu" InfoTip="&lt;b&gt;sleu Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;(Less Than Equal Unsigned) Set register Rdest to 1 if register Rsrc1 is less than or equal to Src2 and to 0 otherwise." />
	<MIPSKeyword Category="2" Keyword="slt" InfoTip="&lt;b&gt;slt Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;(Less Than) Set register Rdest to 1 if register Rsrc1 is less than Src2 and to 0 otherwise." />
	<MIPSKeyword Category="2" Keyword="slti" InfoTip="&lt;b&gt;slti Rdest, Rsrc1, Imm&lt;/b&gt;&lt;br/&gt;(Less Than Immediate) Set register Rdest to 1 if register Rsrc1 is less than Immediate and to 0 otherwise." />
	<MIPSKeyword Category="2" Keyword="sltu" InfoTip="&lt;b&gt;sltu Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;(Less Than Unsigned) Set register Rdest to 1 if register Rsrc1 is less than Src2 and to 0 otherwise." />
	<MIPSKeyword Category="2" Keyword="sltiu" InfoTip="&lt;b&gt;sltiu Rdest, Rsrc1, Imm&lt;/b&gt;&lt;br/&gt;(Less Than Unsigned Immediate) Set register Rdest to 1 if register Rsrc1 is less than Immediate and to 0 otherwise." />
	<MIPSKeyword Category="2" Keyword="sne" InfoTip="&lt;b&gt;sne Rdest, Rsrc1, Src2&lt;/b&gt;&lt;br/&gt;(Not Equal) Set register Rdest to 1 if register Rsrc1 is not equal to Src2 and to 0 otherwise." />

	<MIPSKeyword Category="3" Keyword="li" InfoTip="&lt;b&gt;li Rdest, imm&lt;/b&gt;&lt;br/&gt;Move immediate into register Rdest." />
	<MIPSKeyword Category="3" Keyword="lui" InfoTip="&lt;b&gt;lui Rdest, imm&lt;/b&gt;&lt;br/&gt;(Upper Immediate) Load the lower halfword of the immediate imm into the upper halfword of register Rdest. The lower bits of the register are set to 0." />
	<MIPSKeyword Category="3" Keyword="la" InfoTip="&lt;b&gt;la Rdest, address&lt;/b&gt;&lt;br/&gt;Load computed address, not the contents of the location, into register Rdest." />
	<MIPSKeyword Category="3" Keyword="lb" InfoTip="&lt;b&gt;lb Rdest, addressByte&lt;/b&gt;&lt;br/&gt;(Signed) Load the byte at address into register Rdest." />
	<MIPSKeyword Category="3" Keyword="lbu" InfoTip="&lt;b&gt;lbu Rdest, addressByte&lt;/b&gt;&lt;br/&gt;(Unsigned) Load the byte at address into register Rdest." />
	<MIPSKeyword Category="3" Keyword="ld" InfoTip="&lt;b&gt;ld Rdest, address&lt;/b&gt;&lt;br/&gt;Load the 64-bit quantity (Doubleword) at address into registers Rdest and Rdest + 1." />
	<MIPSKeyword Category="3" Keyword="lh" InfoTip="&lt;b&gt;lh Rdest, address&lt;/b&gt;&lt;br/&gt;(Signed) Load the 16-bit quantity (halfword) at address into register Rdest." />
	<MIPSKeyword Category="3" Keyword="lhu" InfoTip="&lt;b&gt;lhu Rdest, address&lt;/b&gt;&lt;br/&gt;(Unsigned) Load the 16-bit quantity (halfword) at address into register Rdest." />
	<MIPSKeyword Category="3" Keyword="lw" InfoTip="&lt;b&gt;lw Rdest, addressWord&lt;/b&gt;&lt;br/&gt;Load the 32-bit quantity (word) at address into register Rdest." />
	<MIPSKeyword Category="3" Keyword="lwcz" InfoTip="&lt;b&gt;lwcz Rdest, addressWord&lt;/b&gt;&lt;br/&gt;(Coprocessor Z) Load the word at address into register Rdest of coprocessor z (0-3)." />
	<MIPSKeyword Category="3" Keyword="lwl" InfoTip="&lt;b&gt;lwl Rdest, addressWord&lt;/b&gt;&lt;br/&gt;Load the left bytes from the word at the possibly-unaligned address into register Rdest." />
	<MIPSKeyword Category="3" Keyword="lwr" InfoTip="&lt;b&gt;lwr Rdest, addressWord&lt;/b&gt;&lt;br/&gt;Load the right bytes from the word at the possibly-unaligned address into register Rdest." />
	<MIPSKeyword Category="3" Keyword="ulh" InfoTip="&lt;b&gt;ulh Rdest, address&lt;/b&gt;&lt;br/&gt;(Load Halfword Signed) Load the 16-bit quantity (halfword) at the possibly-unaligned address into register Rdest." />
	<MIPSKeyword Category="3" Keyword="ulhu" InfoTip="&lt;b&gt;ulhu Rdest, address&lt;/b&gt;&lt;br/&gt;(Load Halfword Unsigned) Load the 16-bit quantity (halfword) at the possibly-unaligned address into register Rdest." />
	<MIPSKeyword Category="3" Keyword="ulw" InfoTip="&lt;b&gt;ulw Rdest, address&lt;/b&gt;&lt;br/&gt;Load the 32-bit quantity (word) at the possibly-unaligned address into register Rdest." />
	<MIPSKeyword Category="3" Keyword="sb" InfoTip="&lt;b&gt;sb Rsrc, addressByte&lt;/b&gt;&lt;br/&gt;Store the low byte from register Rsrc at address. " />
	<MIPSKeyword Category="3" Keyword="sd" InfoTip="&lt;b&gt;sd Rsrc, address&lt;/b&gt;&lt;br/&gt;Store the 64-bit quantity (DoubleWord) in registers Rsrc and Rsrc + 1 at address. " />
	<MIPSKeyword Category="3" Keyword="sh" InfoTip="&lt;b&gt;sh Rsrc, address&lt;/b&gt;&lt;br/&gt;Store the low halfword from register Rsrc at address. " />
	<MIPSKeyword Category="3" Keyword="sw" InfoTip="&lt;b&gt;sw Rsrc, addressWord&lt;/b&gt;&lt;br/&gt;Store the word from register Rsrc at address. " />
	<MIPSKeyword Category="3" Keyword="swcz" InfoTip="&lt;b&gt;swcz Rsrc, addressWord&lt;/b&gt;&lt;br/&gt;(Coprocessor Z) Store the word from register Rsrc of coprocessor z at address. " />
	<MIPSKeyword Category="3" Keyword="swl" InfoTip="&lt;b&gt;swl Rsrc, addressWord&lt;/b&gt;&lt;br/&gt;Store the left bytes from register Rsrc at the possibly-unaligned address." />
	<MIPSKeyword Category="3" Keyword="swr" InfoTip="&lt;b&gt;swr Rsrc, addressWord&lt;/b&gt;&lt;br/&gt;Store the right bytes from register Rsrc at the possibly-unaligned address." />
	<MIPSKeyword Category="3" Keyword="ush" InfoTip="&lt;b&gt;ush Rsrc, address&lt;/b&gt;&lt;br/&gt;(Store halfword) Store the low halfword from register Rsrc at the possibly-unaligned address." />
	<MIPSKeyword Category="3" Keyword="usw" InfoTip="&lt;b&gt;usw Rsrc, address&lt;/b&gt;&lt;br/&gt;(Store Word) Store the word from register Rsrc at the possibly-unaligned address." />
	<MIPSKeyword Category="3" Keyword="move" InfoTip="&lt;b&gt;move Rdest, Rsrc&lt;/b&gt;&lt;br/&gt;Move the contents of Rsrc to Rdest." />
	<MIPSKeyword Category="3" Keyword="mfhi" InfoTip="&lt;b&gt;mfhi Rdest&lt;/b&gt;&lt;br/&gt;(From hi) Move the contents of the hi register to register Rdest." />
	<MIPSKeyword Category="3" Keyword="mflo" InfoTip="&lt;b&gt;mflo Rdest&lt;/b&gt;&lt;br/&gt;(From lo) Move the contents of the lo register to register Rdest." />
	<MIPSKeyword Category="3" Keyword="mthi" InfoTip="&lt;b&gt;mthi Rdest&lt;/b&gt;&lt;br/&gt;(To hi) Move the contents register Rdest to the hi register." />
	<MIPSKeyword Category="3" Keyword="mtlo" InfoTip="&lt;b&gt;mtlo Rdest&lt;/b&gt;&lt;br/&gt;(To lo) Move the contents register Rdest to the lo register." />
	<MIPSKeyword Category="3" Keyword="mfcz" InfoTip="&lt;b&gt;mfcz Rdest, CPsrc&lt;/b&gt;&lt;br/&gt;(From Coprocessor z) Move the contents of coprocessor z's register CPsrc to CPU register Rdest." />
	<MIPSKeyword Category="3" Keyword="mtcz" InfoTip="&lt;b&gt;mtcz Rsrc, CPdest&lt;/b&gt;&lt;br/&gt;(To Coprocessor z) Move the contents of CPU register Rsrc to coprocessor z's register CPdest." />

	<MIPSKeyword Category="4" Keyword="rfe" InfoTip="&lt;b&gt;rfe&lt;/b&gt;&lt;br/&gt;(From Exception) Restore the Status register. " />
	<MIPSKeyword Category="4" Keyword="syscall" InfoTip="&lt;b&gt;syscall&lt;/b&gt;&lt;br/&gt;Register $v0 contains the number of the system call provided by SPIM. " />
	<MIPSKeyword Category="4" Keyword="break" InfoTip="&lt;b&gt;break n&lt;/b&gt;&lt;br/&gt;Cause exception n. Exception 1 is reserved for the debugger. " />
	<MIPSKeyword Category="4" Keyword="nop" InfoTip="&lt;b&gt;nop&lt;/b&gt;&lt;br/&gt;(operation) Do nothing." />
	<MIPSKeyword Category="4" Keyword="print_int" InfoTip="&lt;b&gt;print_int&lt;/b&gt;&lt;br/&gt;Call Code: 1 / Arguments: $a0 (integer) / Prints an integer on the console." InsertText="|li $v0, 1	# system call code for print_int|li $a0, 5	# integer to print|syscall		# print it|" />
	<MIPSKeyword Category="4" Keyword="print_float" InfoTip="&lt;b&gt;print_float&lt;/b&gt;&lt;br/&gt;Call Code: 2 / Arguments: $f12 (float) / Prints a single floating point number on the console." InsertText="|li $v0, 2	# system call code for printing float = 2|syscall		# print float stored in $f12|" />
	<MIPSKeyword Category="4" Keyword="print_double" InfoTip="&lt;b&gt;print_double&lt;/b&gt;&lt;br/&gt;Call Code: 3 / Arguments: $f12 (double) / Prints a double precision number on the console." InsertText="|li $v0, 3	# system call code for printing double = 3|syscall		# print double stored in $f12|" />
	<MIPSKeyword Category="4" Keyword="print_string" InfoTip="&lt;b&gt;print_string&lt;/b&gt;&lt;br/&gt;Call Code: 4 / Arguments: $a0 (pointer to a null-terminated string) / Prints a string on the console." InsertText="|li $v0, 4	# system call code for printing string = 4|la $a0, out_string	# load address of string to be printed into $a0|syscall			# call operating system to perform print operation|" />
	<MIPSKeyword Category="4" Keyword="read_int" InfoTip="&lt;b&gt;read_int&lt;/b&gt;&lt;br/&gt;Call Code: 5 / Result: $v0 (integer) / Reads an entire line of input up to and including the newline." InsertText="|li $v0, 5	# get ready to read in integers|syscall		# system waits for input|sw $v0, num1	# store the result of the read (returned in $v0) in num1|" />
	<MIPSKeyword Category="4" Keyword="read_float" InfoTip="&lt;b&gt;read_float&lt;/b&gt;&lt;br/&gt;Call Code: 6 / Result: $f0 (float) / Reads an entire line of input up to and including the newline." InsertText="|li $v0, 6	# get ready to read in float|syscall		# system waits for input|sw $f0, num1	# store the result of the read (returned in $f0) in num1|" />
	<MIPSKeyword Category="4" Keyword="read_double" InfoTip="&lt;b&gt;read_double&lt;/b&gt;&lt;br/&gt;Call Code: 7 / Result: $f0 (double) / Reads an entire line of input up to and including the newline." InsertText="|li $v0, 7	# get ready to read in double|syscall		# system waits for input|sw $f0, num1	# store the result of the read (returned in $f0) in num1|" />
	<MIPSKeyword Category="4" Keyword="read_string" InfoTip="&lt;b&gt;read_string&lt;/b&gt;&lt;br/&gt;Call Code: 8 / Arguments: $a0 = Buffer, $a1 = length / Reads up to n-1 characters into a buffer and terminates the string with a null byte." InsertText="|li $v0, 8	# get ready to read in string|syscall		# system waits for input|" />
	<MIPSKeyword Category="4" Keyword="sbrk" InfoTip="&lt;b&gt;sbrk&lt;/b&gt;&lt;br/&gt;Call Code: 9 / Arguments: $a0 = amount / Result: $v0 (address) / Returns a pointer to a block of memory containing n additional bytes." InsertText="|li $v0, 9	# sbrk|syscall|" />
	<MIPSKeyword Category="4" Keyword="exit" InfoTip="&lt;b&gt;exit&lt;/b&gt;&lt;br/&gt;Call Code: 10 / Stops a program from running." InsertText="|li $v0, 10		# exits program|syscall|" />

	<MIPSKeyword Category="5" Keyword="$zero" InfoTip="&lt;b&gt;$zero&lt;/b&gt;&lt;br/&gt;(0) Constant 0" />
	<MIPSKeyword Category="5" Keyword="$at" InfoTip="&lt;b&gt;$at&lt;/b&gt;&lt;br/&gt;(1) Reserved for assembler" />
	<MIPSKeyword Category="5" Keyword="$v0" InfoTip="&lt;b&gt;$v0&lt;/b&gt;&lt;br/&gt;(2) Expression evaluation/results of a function" />
	<MIPSKeyword Category="5" Keyword="$v1" InfoTip="&lt;b&gt;$v1&lt;/b&gt;&lt;br/&gt;(3) Expression evaluation/results of a function" />
	<MIPSKeyword Category="5" Keyword="$a0" InfoTip="&lt;b&gt;$a0&lt;/b&gt;&lt;br/&gt;(4) Argument 1" />
	<MIPSKeyword Category="5" Keyword="$a1" InfoTip="&lt;b&gt;$a1&lt;/b&gt;&lt;br/&gt;(5) Argument 2" />
	<MIPSKeyword Category="5" Keyword="$a2" InfoTip="&lt;b&gt;$a2&lt;/b&gt;&lt;br/&gt;(6) Argument 3" />
	<MIPSKeyword Category="5" Keyword="$a3" InfoTip="&lt;b&gt;$a3&lt;/b&gt;&lt;br/&gt;(7) Argument 4" />
	<MIPSKeyword Category="5" Keyword="$t0" InfoTip="&lt;b&gt;$t0&lt;/b&gt;&lt;br/&gt;(8) Temporary (not preserved across call)" />
	<MIPSKeyword Category="5" Keyword="$t1" InfoTip="&lt;b&gt;$t1&lt;/b&gt;&lt;br/&gt;(9) Temporary (not preserved across call)" />
	<MIPSKeyword Category="5" Keyword="$t2" InfoTip="&lt;b&gt;$t2&lt;/b&gt;&lt;br/&gt;(10) Temporary (not preserved across call)" />
	<MIPSKeyword Category="5" Keyword="$t3" InfoTip="&lt;b&gt;$t3&lt;/b&gt;&lt;br/&gt;(11) Temporary (not preserved across call)" />
	<MIPSKeyword Category="5" Keyword="$t4" InfoTip="&lt;b&gt;$t4&lt;/b&gt;&lt;br/&gt;(12) Temporary (not preserved across call)" />
	<MIPSKeyword Category="5" Keyword="$t5" InfoTip="&lt;b&gt;$t5&lt;/b&gt;&lt;br/&gt;(13) Temporary (not preserved across call)" />
	<MIPSKeyword Category="5" Keyword="$t6" InfoTip="&lt;b&gt;$t6&lt;/b&gt;&lt;br/&gt;(14) Temporary (not preserved across call)" />
	<MIPSKeyword Category="5" Keyword="$t7" InfoTip="&lt;b&gt;$t7&lt;/b&gt;&lt;br/&gt;(15) Temporary (not preserved across call)" />
	<MIPSKeyword Category="5" Keyword="$s0" InfoTip="&lt;b&gt;$s0&lt;/b&gt;&lt;br/&gt;(16) Saved Temporary (preserved across call)" />
	<MIPSKeyword Category="5" Keyword="$s1" InfoTip="&lt;b&gt;$s1&lt;/b&gt;&lt;br/&gt;(17) Saved Temporary (preserved across call)" />
	<MIPSKeyword Category="5" Keyword="$s2" InfoTip="&lt;b&gt;$s2&lt;/b&gt;&lt;br/&gt;(18) Saved Temporary (preserved across call)" />
	<MIPSKeyword Category="5" Keyword="$s3" InfoTip="&lt;b&gt;$s3&lt;/b&gt;&lt;br/&gt;(19) Saved Temporary (preserved across call)" />
	<MIPSKeyword Category="5" Keyword="$s4" InfoTip="&lt;b&gt;$s4&lt;/b&gt;&lt;br/&gt;(20) Saved Temporary (preserved across call)" />
	<MIPSKeyword Category="5" Keyword="$s5" InfoTip="&lt;b&gt;$s5&lt;/b&gt;&lt;br/&gt;(21) Saved Temporary (preserved across call)" />
	<MIPSKeyword Category="5" Keyword="$s6" InfoTip="&lt;b&gt;$s6&lt;/b&gt;&lt;br/&gt;(22) Saved Temporary (preserved across call)" />
	<MIPSKeyword Category="5" Keyword="$s7" InfoTip="&lt;b&gt;$s7&lt;/b&gt;&lt;br/&gt;(23) Saved Temporary (preserved across call)" />
	<MIPSKeyword Category="5" Keyword="$t8" InfoTip="&lt;b&gt;$t8&lt;/b&gt;&lt;br/&gt;(24) Temporary (not preserved across call)" />
	<MIPSKeyword Category="5" Keyword="$t9" InfoTip="&lt;b&gt;$t9&lt;/b&gt;&lt;br/&gt;(25) Temporary (not preserved across call)" />
	<MIPSKeyword Category="5" Keyword="$k0" InfoTip="&lt;b&gt;$k0&lt;/b&gt;&lt;br/&gt;(26) Reserved for OS kernel" />
	<MIPSKeyword Category="5" Keyword="$k1" InfoTip="&lt;b&gt;$k1&lt;/b&gt;&lt;br/&gt;(27) Reserved for OS kernel" />
	<MIPSKeyword Category="5" Keyword="$gp" InfoTip="&lt;b&gt;$gp&lt;/b&gt;&lt;br/&gt;(28) Pointer to global area" />
	<MIPSKeyword Category="5" Keyword="$sp" InfoTip="&lt;b&gt;$sp&lt;/b&gt;&lt;br/&gt;(29) Stack pointer" />
	<MIPSKeyword Category="5" Keyword="$fp" InfoTip="&lt;b&gt;$fp&lt;/b&gt;&lt;br/&gt;(30) Frame pointer" />
	<MIPSKeyword Category="5" Keyword="$ra" InfoTip="&lt;b&gt;$ra&lt;/b&gt;&lt;br/&gt;(31) Return address (used by function call)" />

	<MIPSKeyword Category="6" Keyword=".align" InfoTip="&lt;b&gt;.align n&lt;/b&gt;&lt;br/&gt;Align the next datum on a 2^n byte boundary.&lt;br/&gt;.align 0 turns off automatic alignment of .half, .word, .float, and .double directives until the next .data or .kdata directive." />
	<MIPSKeyword Category="6" Keyword=".ascii" InfoTip="&lt;b&gt;.ascii str&lt;/b&gt;&lt;br/&gt;Store the string in memory, but do not null-terminate it." />
	<MIPSKeyword Category="6" Keyword=".asciiz" InfoTip="&lt;b&gt;.asciiz str&lt;/b&gt;&lt;br/&gt;Store the string in memory and null-terminate it." />
	<MIPSKeyword Category="6" Keyword=".byte" InfoTip="&lt;b&gt;.byte b1,..,bn&lt;/b&gt;&lt;br/&gt;Store the n values in successive bytes of memory." />
	<MIPSKeyword Category="6" Keyword=".data" InfoTip="&lt;b&gt;.data addr&lt;/b&gt;&lt;br/&gt;The following data items should be stored in the data segment.&lt;br/&gt;If the optional argument addr is present, the items are stored beginning at address addr." />
	<MIPSKeyword Category="6" Keyword=".double" InfoTip="&lt;b&gt;.double d1,..,dn&lt;/b&gt;&lt;br/&gt;Store the n floating point double precision numbers in successive memory locations." />
	<MIPSKeyword Category="6" Keyword=".extern" InfoTip="&lt;b&gt;.extern sym size&lt;/b&gt;&lt;br/&gt;Declare that the datum stored at sym is size bytes large and is a global symbol.&lt;br/&gt;This directive enables the assembler to store the datum in a portion of the data segment that is efficiently accessed via register $gp." />
	<MIPSKeyword Category="6" Keyword=".float" InfoTip="&lt;b&gt;.float f1,..,fn&lt;/b&gt;&lt;br/&gt;Store the n floating point single precision numbers in successive memory locations." />
	<MIPSKeyword Category="6" Keyword=".globl" InfoTip="&lt;b&gt;.globl sym&lt;/b&gt;&lt;br/&gt;Declare that symbol sym is global and can be referenced from other files." />
	<MIPSKeyword Category="6" Keyword=".half" InfoTip="&lt;b&gt;.half h1,..,hn&lt;/b&gt;&lt;br/&gt;Store the n 16-bit quantities in successive memory halfwords." />
	<MIPSKeyword Category="6" Keyword=".kdata" InfoTip="&lt;b&gt;.kdata addr&lt;/b&gt;&lt;br/&gt;The following data items should be stored in the kernel data segment.&lt;br/&gt;If the optional argument addr is present, the items are stored beginning at address addr." />
	<MIPSKeyword Category="6" Keyword=".ktext" InfoTip="&lt;b&gt;.ktext addr&lt;/b&gt;&lt;br/&gt;The next items are put in the kernel text segment.&lt;br/&gt;In SPIM, these items may only be instructions or words (see the .word directive). If the optional argument addr is present, the items are stored beginning at address addr." />
	<MIPSKeyword Category="6" Keyword=".set" InfoTip="&lt;b&gt;.set&lt;/b&gt;&lt;br/&gt;No help is available for this command." />
	<MIPSKeyword Category="6" Keyword=".space" InfoTip="&lt;b&gt;.space n&lt;/b&gt;&lt;br/&gt;Allocate n bytes of space in the current segment (which must be the data segment in SPIM)." />
	<MIPSKeyword Category="6" Keyword=".text" InfoTip="&lt;b&gt;.text addr&lt;/b&gt;&lt;br/&gt;The next items are put in the user text segment.&lt;br/&gt;In SPIM, these items may only be instructions or words (see the .word directive). If the optional argument addr is present, the items are stored beginning at address addr." />
	<MIPSKeyword Category="6" Keyword=".word" InfoTip="&lt;b&gt;.word w1, ..., wn&lt;/b&gt;&lt;br/&gt;Store the n 32-bit quantities in successive memory words." />

	<MIPSKeyword Category="7" Keyword="abs.d" InfoTip="&lt;b&gt;abs.d Dest, Src&lt;/b&gt;&lt;br/&gt;(Point Absolute Value Double) Compute the absolute value of the floating float double in register Src and put it in register Dest." />
	<MIPSKeyword Category="7" Keyword="abs.s" InfoTip="&lt;b&gt;abs.s Dest, Src&lt;/b&gt;&lt;br/&gt;(Point Absolute Value Single) Compute the absolute value of the floating float single in register Src and put it in register Dest." />
	<MIPSKeyword Category="7" Keyword="add.d" InfoTip="&lt;b&gt;add.d Dest, Src1, Src2&lt;/b&gt;&lt;br/&gt;(Point Addition Double) Compute the sum of the floating float doubles in registers Src1 and Src2 and put it in register Dest." />
	<MIPSKeyword Category="7" Keyword="add.s" InfoTip="&lt;b&gt;add.s Dest, Src1, Src2&lt;/b&gt;&lt;br/&gt;(Point Addition Single) Compute the sum of the floating float singles in registers Src1 and Src2 and put it in register Dest." />
	<MIPSKeyword Category="7" Keyword="bc1f" InfoTip="&lt;b&gt;bc1f label&lt;/b&gt;&lt;br/&gt;(Branch if the status bit in coprocessor 1 is false)" />
	<MIPSKeyword Category="7" Keyword="bc1t" InfoTip="&lt;b&gt;bc1t label&lt;/b&gt;&lt;br/&gt;(Branch if the status bit in coprocessor 1 is true)" />
	<MIPSKeyword Category="7" Keyword="c.eq.d" InfoTip="&lt;b&gt;c.eq.d Src1, Src2&lt;/b&gt;&lt;br/&gt;(Equal Double) Compare the floating point double in register Src1 against the one in Src2&lt;br/&gt; and set the floating point condition flag true if they are equal." />
	<MIPSKeyword Category="7" Keyword="c.eq.s" InfoTip="&lt;b&gt;c.eq.s Src1, Src2&lt;/b&gt;&lt;br/&gt;(Equal Single) Compare the floating point double in register Src1 against the one in Src2&lt;br/&gt; and set the floating point condition flag true if they are equal." />
	<MIPSKeyword Category="7" Keyword="c.le.d" InfoTip="&lt;b&gt;c.le.d Src1, Src2&lt;/b&gt;&lt;br/&gt;(Less Than Equal Double) Compare the floating point double in register Src1 against the one in Src2&lt;br/&gt; and set the floating point condition flag true if the first is less than or equal to the second." />
	<MIPSKeyword Category="7" Keyword="c.le.s" InfoTip="&lt;b&gt;c.le.s Src1, Src2&lt;/b&gt;&lt;br/&gt;(Less Than Equal Single) Compare the floating point double in register Src1 against the one in Src2&lt;br/&gt; and set the floating point condition flag true if the first is less than or equal to the second." />
	<MIPSKeyword Category="7" Keyword="c.lt.d" InfoTip="&lt;b&gt;c.lt.d Src1, Src2&lt;/b&gt;&lt;br/&gt;(Less Than Double) Compare the floating point double in register Src1 against the one in Src2&lt;br/&gt; and set the condition flag true if the first is less than the second." />
	<MIPSKeyword Category="7" Keyword="c.lt.s" InfoTip="&lt;b&gt;c.lt.s Src1, Src2&lt;/b&gt;&lt;br/&gt;(Less Than Single) Compare the floating point double in register Src1 against the one in Src2&lt;br/&gt; and set the condition flag true if the first is less than the second." />
	<MIPSKeyword Category="7" Keyword="cvt.d.s" InfoTip="&lt;b&gt;cvt.d.s Dest, Src&lt;/b&gt;&lt;br/&gt;(Single to Double) Convert the single precision floating point number or integer in register Src to a double precision number&lt;br/&gt; and put it in register Dest." />
	<MIPSKeyword Category="7" Keyword="cvt.d.w" InfoTip="&lt;b&gt;cvt.d.w Dest, Src&lt;/b&gt;&lt;br/&gt;(Integer to Double) Convert the single precision floating point number or integer in register Src to a double precision number&lt;br/&gt; and put it in register Dest." />
	<MIPSKeyword Category="7" Keyword="cvt.s.d" InfoTip="&lt;b&gt;cvt.s.d Dest, Src&lt;/b&gt;&lt;br/&gt;(Double to Single) Convert the double precision floating point number or integer in register Src to a single precision number&lt;br/&gt; and put it in register Dest." />
	<MIPSKeyword Category="7" Keyword="cvt.s.w" InfoTip="&lt;b&gt;cvt.s.w Dest, Src&lt;/b&gt;&lt;br/&gt;(Integer to Single) Convert the double precision floating point number or integer in register Src to a single precision number&lt;br/&gt; and put it in register Dest." />
	<MIPSKeyword Category="7" Keyword="cvt.w.d" InfoTip="&lt;b&gt;cvt.w.d Dest, Src&lt;/b&gt;&lt;br/&gt;(Double to Integer) Convert the double or single precision floating point number in register Src to an integer&lt;br/&gt; and put it in register Dest." />
	<MIPSKeyword Category="7" Keyword="cvt.w.s" InfoTip="&lt;b&gt;cvt.w.s Dest, Src&lt;/b&gt;&lt;br/&gt;(Single to Integer) Convert the double or single precision floating point number in register Src to an integer&lt;br/&gt; and put it in register Dest." />
	<MIPSKeyword Category="7" Keyword="div.d" InfoTip="&lt;b&gt;div.d Dest, Src1, Src2&lt;/b&gt;&lt;br/&gt;(Point Divide Double) Compute the quotient of the floating float doubles in registers Src1 and Src2&lt;br/&gt; and put it in register Dest." />
	<MIPSKeyword Category="7" Keyword="div.s" InfoTip="&lt;b&gt;div.s Dest, Src1, Src2&lt;/b&gt;&lt;br/&gt;(Point Divide Single) Compute the quotient of the floating float singles in registers Src1 and Src2&lt;br/&gt; and put it in register Dest." />
	<MIPSKeyword Category="7" Keyword="l.d" InfoTip="&lt;b&gt;l.d Dest, address&lt;/b&gt;&lt;br/&gt;(Floating Point Double) Load the floating float double at address into register Dest." />
	<MIPSKeyword Category="7" Keyword="l.s" InfoTip="&lt;b&gt;l.s Dest, address&lt;/b&gt;&lt;br/&gt;(Floating Point Single) Load the floating float single at address into register Dest." />
	<MIPSKeyword Category="7" Keyword="mov.d" InfoTip="&lt;b&gt;mov.d Dest, Src&lt;/b&gt;&lt;br/&gt;(Floating Point Double) Move the floating float double from register Src to register Dest." />
	<MIPSKeyword Category="7" Keyword="mov.s" InfoTip="&lt;b&gt;mov.s Dest, Src&lt;/b&gt;&lt;br/&gt;(Floating Point Single) Move the floating float single from register Src to register Dest." />
	<MIPSKeyword Category="7" Keyword="mfc1.d" InfoTip="&lt;b&gt;mfc1.d RDest, Src1&lt;/b&gt;&lt;br/&gt;(Double From Coprocessor 1) Move the contents of floating point registers Src1 and Src1 + 1 to CPU registers RDest and RDest + 1." />
	<MIPSKeyword Category="7" Keyword="mul.d" InfoTip="&lt;b&gt;mul.d Dest, Src1, Src2&lt;/b&gt;&lt;br/&gt;(Point Multiply Double) Compute the product of the floating float doubles in registers Src1 and Src2&lt;br/&gt; and put it in register Dest." />
	<MIPSKeyword Category="7" Keyword="mul.s" InfoTip="&lt;b&gt;mul.s Dest, Src1, Src2&lt;/b&gt;&lt;br/&gt;(Point Multiply Single) Compute the product of the floating float singles in registers Src1 and Src2&lt;br/&gt; and put it in register FRDest." />
	<MIPSKeyword Category="7" Keyword="neg.d" InfoTip="&lt;b&gt;neg.d Dest, Src&lt;/b&gt;&lt;br/&gt;(Double) Negate the floating point double in register Src and put it in register Dest." />
	<MIPSKeyword Category="7" Keyword="neg.s" InfoTip="&lt;b&gt;neg.s Dest, Src&lt;/b&gt;&lt;br/&gt;(Single) Negate the floating point single in register Src and put it in register Dest." />
	<MIPSKeyword Category="7" Keyword="s.d" InfoTip="&lt;b&gt;s.d Dest, address&lt;/b&gt;&lt;br/&gt;(Floating Point Double) Store the floating float double in register Dest at address." />
	<MIPSKeyword Category="7" Keyword="s.s" InfoTip="&lt;b&gt;s.s Dest, address&lt;/b&gt;&lt;br/&gt;(Floating Point Single) Store the floating float single in register Dest at address." />
	<MIPSKeyword Category="7" Keyword="sub.d" InfoTip="&lt;b&gt;sub.d Dest, Src1, Src2&lt;/b&gt;&lt;br/&gt;(Point Subtract Double) Compute the difference of the floating float doubles in registers Src1 and Src2 and put it in register Dest." />
	<MIPSKeyword Category="7" Keyword="sub.s" InfoTip="&lt;b&gt;sub.s Dest, Src1, Src2&lt;/b&gt;&lt;br/&gt;(Point Subtract Single) Compute the difference of the floating float singles in registers Src1 and Src2 and put it in register Dest." />

</MIPSInfo>